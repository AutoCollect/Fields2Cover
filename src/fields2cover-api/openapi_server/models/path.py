from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.point import Point
from openapi_server import util

from openapi_server.models.point import Point  # noqa: E501

class Path(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, point=None, angle=None, len=None):  # noqa: E501
        """Path - a model defined in OpenAPI

        :param point: The point of this Path.  # noqa: E501
        :type point: Point
        :param angle: The angle of this Path.  # noqa: E501
        :type angle: float
        :param len: The len of this Path.  # noqa: E501
        :type len: float
        """
        self.openapi_types = {
            'point': Point,
            'angle': float,
            'len': float
        }

        self.attribute_map = {
            'point': 'point',
            'angle': 'angle',
            'len': 'len'
        }

        self._point = point
        self._angle = angle
        self._len = len

    @classmethod
    def from_dict(cls, dikt) -> 'Path':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Path of this Path.  # noqa: E501
        :rtype: Path
        """
        return util.deserialize_model(dikt, cls)

    @property
    def point(self) -> Point:
        """Gets the point of this Path.


        :return: The point of this Path.
        :rtype: Point
        """
        return self._point

    @point.setter
    def point(self, point: Point):
        """Sets the point of this Path.


        :param point: The point of this Path.
        :type point: Point
        """

        self._point = point

    @property
    def angle(self) -> float:
        """Gets the angle of this Path.

        Angle of the path  # noqa: E501

        :return: The angle of this Path.
        :rtype: float
        """
        return self._angle

    @angle.setter
    def angle(self, angle: float):
        """Sets the angle of this Path.

        Angle of the path  # noqa: E501

        :param angle: The angle of this Path.
        :type angle: float
        """

        self._angle = angle

    @property
    def len(self) -> float:
        """Gets the len of this Path.

        Length of the path (must be >= 0)  # noqa: E501

        :return: The len of this Path.
        :rtype: float
        """
        return self._len

    @len.setter
    def len(self, len: float):
        """Sets the len of this Path.

        Length of the path (must be >= 0)  # noqa: E501

        :param len: The len of this Path.
        :type len: float
        """
        if len is not None and len < 0:  # noqa: E501
            raise ValueError("Invalid value for `len`, must be a value greater than or equal to `0`")  # noqa: E501

        self._len = len
