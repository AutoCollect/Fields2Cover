from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.generate_path_post_request_settings_sorter_settings import GeneratePathPostRequestSettingsSorterSettings
from openapi_server.models.point import Point
from openapi_server.models.robot_settings import RobotSettings
from openapi_server import util

from openapi_server.models.generate_path_post_request_settings_sorter_settings import GeneratePathPostRequestSettingsSorterSettings  # noqa: E501
from openapi_server.models.point import Point  # noqa: E501
from openapi_server.models.robot_settings import RobotSettings  # noqa: E501

class GeneratePathPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, working_lanes=None, transport_lanes=None, start_end_point=None, robot_settings=None, sorter_settings=None, curves_algorithm=None):  # noqa: E501
        """GeneratePathPostRequest - a model defined in OpenAPI

        :param working_lanes: The working_lanes of this GeneratePathPostRequest.  # noqa: E501
        :type working_lanes: str
        :param transport_lanes: The transport_lanes of this GeneratePathPostRequest.  # noqa: E501
        :type transport_lanes: str
        :param start_end_point: The start_end_point of this GeneratePathPostRequest.  # noqa: E501
        :type start_end_point: Point
        :param robot_settings: The robot_settings of this GeneratePathPostRequest.  # noqa: E501
        :type robot_settings: RobotSettings
        :param sorter_settings: The sorter_settings of this GeneratePathPostRequest.  # noqa: E501
        :type sorter_settings: GeneratePathPostRequestSettingsSorterSettings
        :param curves_algorithm: The curves_algorithm of this GeneratePathPostRequest.  # noqa: E501
        :type curves_algorithm: str
        """
        self.openapi_types = {
            'working_lanes': str,
            'transport_lanes': str,
            'start_end_point': Point,
            'robot_settings': RobotSettings,
            'sorter_settings': GeneratePathPostRequestSettingsSorterSettings,
            'curves_algorithm': str
        }

        self.attribute_map = {
            'working_lanes': 'workingLanes',
            'transport_lanes': 'transportLanes',
            'start_end_point': 'startEndPoint',
            'robot_settings': 'robotSettings',
            'sorter_settings': 'sorterSettings',
            'curves_algorithm': 'curvesAlgorithm'
        }

        self._working_lanes = working_lanes
        self._transport_lanes = transport_lanes
        self._start_end_point = start_end_point
        self._robot_settings = robot_settings
        self._sorter_settings = sorter_settings
        self._curves_algorithm = curves_algorithm

    @classmethod
    def from_dict(cls, dikt) -> 'GeneratePathPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _generatePath_post_request of this GeneratePathPostRequest.  # noqa: E501
        :rtype: GeneratePathPostRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def working_lanes(self) -> str:
        """Gets the working_lanes of this GeneratePathPostRequest.

        Optional GeoJSON data for working lanes  # noqa: E501

        :return: The working_lanes of this GeneratePathPostRequest.
        :rtype: str
        """
        return self._working_lanes

    @working_lanes.setter
    def working_lanes(self, working_lanes: str):
        """Sets the working_lanes of this GeneratePathPostRequest.

        Optional GeoJSON data for working lanes  # noqa: E501

        :param working_lanes: The working_lanes of this GeneratePathPostRequest.
        :type working_lanes: str
        """
        if working_lanes is None:
            raise ValueError("Invalid value for `working_lanes`, must not be `None`")  # noqa: E501

        self._working_lanes = working_lanes

    @property
    def transport_lanes(self) -> str:
        """Gets the transport_lanes of this GeneratePathPostRequest.

        Optional GeoJSON data for transport lanes  # noqa: E501

        :return: The transport_lanes of this GeneratePathPostRequest.
        :rtype: str
        """
        return self._transport_lanes

    @transport_lanes.setter
    def transport_lanes(self, transport_lanes: str):
        """Sets the transport_lanes of this GeneratePathPostRequest.

        Optional GeoJSON data for transport lanes  # noqa: E501

        :param transport_lanes: The transport_lanes of this GeneratePathPostRequest.
        :type transport_lanes: str
        """
        if transport_lanes is None:
            raise ValueError("Invalid value for `transport_lanes`, must not be `None`")  # noqa: E501

        self._transport_lanes = transport_lanes

    @property
    def start_end_point(self) -> Point:
        """Gets the start_end_point of this GeneratePathPostRequest.


        :return: The start_end_point of this GeneratePathPostRequest.
        :rtype: Point
        """
        return self._start_end_point

    @start_end_point.setter
    def start_end_point(self, start_end_point: Point):
        """Sets the start_end_point of this GeneratePathPostRequest.


        :param start_end_point: The start_end_point of this GeneratePathPostRequest.
        :type start_end_point: Point
        """
        if start_end_point is None:
            raise ValueError("Invalid value for `start_end_point`, must not be `None`")  # noqa: E501

        self._start_end_point = start_end_point

    @property
    def robot_settings(self) -> RobotSettings:
        """Gets the robot_settings of this GeneratePathPostRequest.


        :return: The robot_settings of this GeneratePathPostRequest.
        :rtype: RobotSettings
        """
        return self._robot_settings

    @robot_settings.setter
    def robot_settings(self, robot_settings: RobotSettings):
        """Sets the robot_settings of this GeneratePathPostRequest.


        :param robot_settings: The robot_settings of this GeneratePathPostRequest.
        :type robot_settings: RobotSettings
        """
        if robot_settings is None:
            raise ValueError("Invalid value for `robot_settings`, must not be `None`")  # noqa: E501

        self._robot_settings = robot_settings

    @property
    def sorter_settings(self) -> GeneratePathPostRequestSettingsSorterSettings:
        """Gets the sorter_settings of this GeneratePathPostRequest.


        :return: The sorter_settings of this GeneratePathPostRequest.
        :rtype: GeneratePathPostRequestSettingsSorterSettings
        """
        return self._sorter_settings

    @sorter_settings.setter
    def sorter_settings(self, sorter_settings: GeneratePathPostRequestSettingsSorterSettings):
        """Sets the sorter_settings of this GeneratePathPostRequest.


        :param sorter_settings: The sorter_settings of this GeneratePathPostRequest.
        :type sorter_settings: GeneratePathPostRequestSettingsSorterSettings
        """
        if sorter_settings is None:
            raise ValueError("Invalid value for `sorter_settings`, must not be `None`")  # noqa: E501

        self._sorter_settings = sorter_settings

    @property
    def curves_algorithm(self) -> str:
        """Gets the curves_algorithm of this GeneratePathPostRequest.

        Algorithm to generate curves  # noqa: E501

        :return: The curves_algorithm of this GeneratePathPostRequest.
        :rtype: str
        """
        return self._curves_algorithm

    @curves_algorithm.setter
    def curves_algorithm(self, curves_algorithm: str):
        """Sets the curves_algorithm of this GeneratePathPostRequest.

        Algorithm to generate curves  # noqa: E501

        :param curves_algorithm: The curves_algorithm of this GeneratePathPostRequest.
        :type curves_algorithm: str
        """
        allowed_values = ["dubins", "dubins_cc", "reeds_shepp"]  # noqa: E501
        if curves_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `curves_algorithm` ({0}), must be one of {1}"
                .format(curves_algorithm, allowed_values)
            )

        self._curves_algorithm = curves_algorithm
