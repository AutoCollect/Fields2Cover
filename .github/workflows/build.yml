name: Build and test

on: 
  push:
  pull_request:
  release:

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        #- {
        #  name: "Windows Latest MinGW",
        #  os: windows-latest,
        #  artifact: "windows_mingw.7z",
        #  build_type: "Release",
        #  cc: "gcc",
        #  cxx: "g++",
        #  archiver: "7z a",
        #  generators: "Unix Makefiles"
        #  }
        - {
            name: "Ubuntu 22.04",
            os: ubuntu-22.04,
            artifact: "ubuntu_gcc.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Unix Makefiles"
          }
        - {
            name: "Ubuntu 20.04",
            os: ubuntu-20.04,
            artifact: "ubuntu_gcc.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Unix Makefiles"
          }    
        - {
            name: "Ubuntu 18.04",
            os: ubuntu-18.04,
            artifact: "ubuntu_gcc.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Unix Makefiles"
          }     
          #- {
          #  name: "macOS Latest Clang",
          #  os: macos-latest,
          #  artifact: "macos_clang.7z",
          #  build_type: "Release",
          #  cc: "clang",
          #  cxx: "clang++",
          #  archiver: "7za a",
          #  generators: "Unix Makefiles"
          #}

    steps:
      - uses: actions/checkout@v2
      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
      - name: Install dependencies on windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          choco install --no-progress -y cmake make eigen python numpy mingw


        # cmd "${{ matrix.config.environment_script }}"
      - name: Install dependencies on ubuntu
        if: contains(matrix.config.name, 'Ubuntu')
        run: |
          sudo apt-get -y update && sudo apt-get install -y --no-install-recommends software-properties-common
          sudo add-apt-repository ppa:ubuntugis/ubuntugis-unstable
          sudo apt-get -y update -qq
          sudo apt-get install -y cmake make
          sudo apt-get install -y python3 curl zip unzip -qq
          sudo apt-get install -y --no-install-recommends ca-certificates  doxygen git libeigen3-dev libgdal-dev libpython3-dev python3-pip python3-matplotlib lcov  libgtest-dev libtbb-dev swig python3-pytest -qq
      
      - name: Install dependencies on macos
        if: startsWith(matrix.config.os, 'macos')
        run: |
          brew install p7zip cmake make eigen swig numpy gdal
          
      - name: Configure
        shell: bash
        run: |
          mkdir build
          mkdir instdir
          cmake \
            -S . \
            -B build \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -G "${{ matrix.config.generators }}" \
            -DCMAKE_INSTALL_PREFIX:PATH=instdir  \
            -DBUILD_PYTHON=ON   \
            -DALLOW_PARALLELIZATION=ON  \
            -DBUILD_TUTORIALS=OFF \
            -DBUILD_TESTS=ON   \
            -DBUILD_DOC=OFF

      - name: Build
        working-directory: ${{github.workspace}}/build
        run: make -j2

      - name: Install Strip
        working-directory: ${{github.workspace}}/build
        run: sudo make install
        
      - name: Test C++
        working-directory: ${{github.workspace}}/build
        run: make check

      - name: Test Python
        working-directory: ${{github.workspace}}
        run: pytest-3 tests/python/

